<snippet>
    <content><![CDATA[
${1:bmQuestionHanler('.bm-question'); // enter in the respview.client.js}

<style label="bmHeader" name="el.select.header"><![CDATA[
\@if col.label == 'model'
<select name="\$(name)" id="\$(id)" class="input dropdown" \$(extra) data-open=".\$(this.label)oe-\$(row.index)-\$(col.index)">
\@else
<select name="\$(name)" id="\$(id)" class="input dropdown" \$(extra) data-open=".\$(this.label)oe-\$(row.index)-\$(col.index)">
\@endif
]]${-1}></style>
<style label="brandSelect" cols="brand" name="el.select.element"><![CDATA[
\@if 'br' in choice.label
<option value="\$(value)" \$(selected) class="\${choice.styles.ss.choiceClassNames if ec.choice else ""}" data-brand="\$(choice.value)" \${'data-oe="1"' if hasattr(BMbase.attr(choice.label), 'open') else ""}>\$(text)</option>
\@endif
]]${-1}></style>
<style label="modelSelect" cols="model" name="el.select.element"><![CDATA[
\@if 'md' in choice.label
<option value="\$(value)" \$(selected) class="\${choice.styles.ss.choiceClassNames if ec.choice else ""}" data-brand="\${choice.value//100}" data-model="\$(choice.value)" \${'data-oe="1"' if hasattr(BMbase.attr(choice.label), 'open') else ""}>\$(text)</option>
\@endif
]]${-1}></style>
<style label="bmLeft" name="question.left"><![CDATA[
\@if this.styles.ss.legendColWidth
    <\$(tag) scope="row" class="cell nonempty legend row-legend row-legend-left \${"row-legend-both " if ec.haveRightLegend and ec.haveLeftLegend else ""}row-legend-basic \${"mobile-left-row-legend " if force else ""}\$(levels) \${"desktop" if this.grouping.cols else "mobile"} \${"row-legend-both-space " if ec.haveRightLegend and ec.haveLeftLegend and (not row.group or not row.index==0) else "border-collapse "} \$(row.styles.ss.rowClassNames)" style="width:\${this.styles.ss.legendColWidth}; min-width:\${this.styles.ss.legendColWidth}">
        <div class="row-text">\$(text)<div class="\$(this.label)none-\$(row.index)-div"></div></div>
    </\$(tag)>
\@else
    <\$(tag) scope="row" class="cell nonempty legend row-legend row-legend-left \${"row-legend-both " if ec.haveRightLegend and ec.haveLeftLegend else ""}row-legend-basic \${"mobile-left-row-legend " if force else ""}\$(levels) \${"desktop" if this.grouping.cols else "mobile"} \${"row-legend-both-space " if ec.haveRightLegend and ec.haveLeftLegend and (row.group or not row.index==0) else "border-collapse "} \$(row.styles.ss.rowClassNames)">
        <div class="row-text">\$(text)<div class="\$(this.label)none-\$(row.index)-div"></div></div>
    </\$(tag)>
\@endif
]]${-1}></style>
<style label="bmFooter" name="el.select.footer"><![CDATA[
</select>
<div class="select-oe-div \$(this.label)oe-\$(row.index)-\$(col.index)-div"></div>
]]${-1}></style>
<style label="bmOpen" name="el.text"><![CDATA[
<input type="text" name="\$(name)" id="\$(id)" class="\$(this.label)-\$(row.index)-\$(col.index) other-open" value="\$(value)" size="\$(size)" \${"" if value else "disabled"} placeholder="\${this.styles.ss.postText or ""}"/>
<script>
document.querySelector(".\$(this.label)-\$(row.index)-\$(col.index)-div").appendChild(document.querySelector("input[name='\$(name)']"));
</script>
]]${-1}></style>

<exec when="init">
def brand_model_check(model_unique=True, use_open=False, open_cols=["brand", "model"], use_none=False, none_hard=True) :
  oe_label = allQuestions["{}oe".format(this.label)] if use_open else None
  none_label = allQuestions["{}none".format(this.label)] if use_none else None

  # model unique
  if model_unique :
    models = [row.model.val for row in this.rows if row.model.any ]
    if models :
      for model in models :
        if models.count(model) gt 1 :
          error(this.lget("duplicate-column"), col=this.model)
          break

  for row in this.rows :
    # invalid logic
    if row.brand.any and row.model.any :
      brand_code = this.choices[row.brand.val].value
      model_code = this.choices[row.model.val].value
      if not brand_code == model_code//100 :
        error(this.lget("survey.has-errors"), row=row)

    for col in this.cols :
      # open check
      if oe_label :
        curr = row.attr(col.label)
        if curr.any :
          base_label = this.choices[curr.val].label
          if col.label in open_cols :
            if hasattr(BMbase.attr(base_label), 'open') :
              open_base = oe_label.attr(row.label).attr(col.label)
              if not open_base :
                error(this.lget("extraInfo"), row=row, col=col)

      # none check
      if none_label :
        if not getattr(none_label, row.label) :
          if not getattr(row, col.label).any :
            error(this.lget("noAnswerSelected"), row=row, col=col)

  # none order check
  if none_label :
    for row in this.rows[:-1] :
      next_idx = row.index + 1
      if none_label.rows[row.index] and not none_label.rows[next_idx] :
        error(res.chk_plz, row=row)
        error(res.chk_plz, row=this.rows[next_idx])

  # all none answer
  if none_label and none_hard :
    if len(none_label.rows) ge 2 :
      if none_label.all :
        for row in this.rows :
          error(res.chk_plz, row=row)

def set_pipe_value(base_qid, set_qid) :
  if base_qid.rows :
    for eachRow in base_qid.rows :
      set_text = []
      if eachRow.brand.any and eachRow.model.any :
        brand_label = base_qid.choices[eachRow.brand.val].label
        model_label = base_qid.choices[eachRow.model.val].label
      
        for answer_label, col_name in [(brand_label, 'brand'), (model_label, 'model')] :
          if hasattr(BMbase.attr(answer_label), 'open') :
            base_qid_oe = allQuestions['%soe'%(base_qid.label)]
            set_text.append(getattr(base_qid_oe.attr(eachRow.label), col_name).unsafe_val)
          else :
            set_text.append(base_qid.choices[getattr(eachRow, col_name).val].text)

      if set_text :
        set_qid.attr(eachRow.label).val = ' '.join(set_text)
  else :
      set_text = []
      if base_qid.brand.any and base_qid.model.any :
        brand_label = base_qid.choices[base_qid.brand.val].label
        model_label = base_qid.choices[base_qid.model.val].label
      
        for answer_label, col_name in [(brand_label, 'brand'), (model_label, 'model')] :
          if hasattr(BMbase.attr(answer_label), 'open') :
            base_qid_oe = allQuestions['%soe'%(base_qid.label)]
            set_text.append(getattr(base_qid_oe.attr(base_qid.label), col_name).unsafe_val)
          else :
            set_text.append(base_qid.choices[getattr(base_qid, col_name).val].text)

      if set_text :
        set_qid.val = ' '.join(set_text)
</exec>

<radio 
  label="BMbase"
  cond="0"
  optional="1"
  where="execute,survey,notdp">
  <title>(HIDDEN) Brand/Model logic base question</title>
  <insert source="brand_list"/>
  <insert source="model_list"/>
</radio>

<suspend/>
]]></content>
    <!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
    <tabTrigger>bm.setting</tabTrigger>
    <!-- Optional: Set a scope to limit where the snippet will trigger -->
    <scope>text.xml</scope>
</snippet>

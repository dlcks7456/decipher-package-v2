<snippet>
  <content><![CDATA[
<res label="rate_show_score_text"><b>(%s점)</b> %s</res>
<res label="rank_order_err">점수가 높은 순서로 응답 부탁드립니다.</res>
<res label="rank_remain_err">아직 높은 점수로 답변한 항목이 있습니다. 답변을 다시 확인해 주세요.</res>
<exec when="init">
def rate_show_score(scale_qid, rank_qid) :
  for row in rank_qid.rows :
    if scale_qid.attr(row.label).any :
      row.text = res.rate_show_score_text%(scale_qid.cols[scale_qid.attr(row.label).val].value, scale_qid.attr(row.label).text)

def scale_rank_items(scale_qid, rank_qid, reverse=True) :
    if gv.isSST() :
      return {
          'show' : [x.label for x in rank_qid.rows],
          'skip' : False,
          'auto' : [],
          'low' : []
        }

    try :
      scale_answer = {x.label: x.val for x in scale_qid.rows.order if x.any}
      sorted_list = sorted(scale_answer.items(), key=lambda item: item[1], reverse=reverse)
      
      rank_cols = [each for each in rank_qid.cols]
      if not reverse :
        rank_cols.reverse()
   
      sort_rows = []
      current_value = None
      current_group = []
   
      for item in sorted_list:
          key, value = item
          if value != current_value:
              if current_group: 
                  sort_rows.append(current_group)
              current_group = [key]
              current_value = value
          else:
              current_group.append(key)
   
      if current_group:
          sort_rows.append(current_group)
   
      rank_able_answer = []
      rank_auto_row = {}
      rowCond = []
      for idx, eachCol in enumerate(rank_cols) :
        if idx ge len(sort_rows) : 
          continue
        row_label = sort_rows[idx]
        rank_able_answer.append(row_label)
   
        if len(rowCond) ge len(rank_cols) :
          continue
   
        for x in row_label :
          rowCond.append(x)
   
      rank_qid.rows.order = [scale_qid.attr(each).index for each in sum(sort_rows, [])]
   
      skip_cond = all(len(row)==1 for row in rank_able_answer)
      print(rank_able_answer)
      print(rowCond)
   
      auto_rows = []
      for idx, row_list in enumerate(rank_able_answer) :
        if len(row_list) == 1 :
          auto_rows.append([idx+1, row_list[0]])
          if not gv.isSST() :
            rank_qid.cols[idx].val = rank_qid.attr(row_list[0]).index
        else :
          break


      last_label = []

      if not skip_cond :
        row_score_dict = {x: int(scale_qid.cols[scale_qid.attr(x).val].value) for x in rowCond}
        print(row_score_dict)

        score_list = row_score_dict.values()

        if len(score_list) == len(rank_qid.cols) :
          min_score = min(score_list)
          min_rows = [lb for lb, ans in row_score_dict.items() if ans == min_score]
          print('Min Score', min_score)
          print(min_rows)

          chk_cnt = 1
          while True :
            print(chk_cnt)
            if len(min_rows) == 1 :
              low_attr = min_rows[0]
              print(low_attr)
              rowCond.remove(low_attr)
              last_label.append(low_attr)
              row_score_dict = {x: int(scale_qid.cols[scale_qid.attr(x).val].value) for x in rowCond}
              score_list = row_score_dict.values()
              min_score = min(score_list)
              min_rows = [lb for lb, ans in row_score_dict.items() if ans == min_score]
              print(low_attr, min_rows)
              chk_cnt += 1
              print('')
            else :
              break

      return {
        'show' : rowCond,
        'skip' : skip_cond,
        'auto' : auto_rows,
        'low' : last_label
      }
    except :
      return {
          'show' : [x.label for x in rank_qid.rows],
          'skip' : False,
          'auto' : [],
          'low' : []
        }

def scale_rank_vali(scale_qid, reverse=True) :
  if gv.isSST() :
    return

  err_flag = False
  remain_answer = [r for r in this.rows if not r and scale_qid.attr(r.label).any]
  for idx, eachCol in enumerate(this.cols) :
    if not eachCol.displayed :
      continue

    if idx == (len([c for c in this.cols if c.displayed])-1) :
      continue
 
    curr = eachCol
    next = this.cols[idx+1]
 
    curr_value = scale_qid.rows[curr.val].val
    next_value = scale_qid.rows[next.val].val
 
    if next_value gt curr_value :
      for x in [curr, next] :
        error(res.rank_order_err, col=x)
        err_flag = True

    if next_value lt curr_value :
      remain_value = [scale_qid.attr(r.label).val for r in remain_answer]
      if curr_value in remain_value :
        for r in remain_answer :
          if scale_qid.attr(r.label).val == curr_value :
            error(res.rank_remain_err, row=r)
            err_flag = True

  if not err_flag :
    row_score_dict = {x: int(scale_qid.cols[scale_qid.attr(x.label).val].value) for x in this.rows if x.displayed}
    low_labels = scale_rank_items(scale_qid, this, reverse=reverse)['low']

    if low_labels :
      rv_cols = this.cols[::-1]
      for idx, low in enumerate(low_labels) :
        rv_cols[idx].val = this.attr(low).index
</exec>
]]></content>
  <!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
  <tabTrigger>rate.rank.def</tabTrigger>
  <!-- Optional: Set a scope to limit where the snippet will trigger -->
  <scope>text.xml</scope>
</snippet>
